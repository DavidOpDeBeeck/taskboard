group 'be.davidopdebeeck'
version '1.0'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.boxfuse.client:flyway-release:4.0"
    }
}

apply plugin: 'org.flywaydb.flyway'

// ------------------------------------------
// All projects
// ------------------------------------------

allprojects {
    apply plugin: 'java'

    group 'be.davidopdebeeck'
    version = '1.0'
}

// ------------------------------------------
// Sub projects
// ------------------------------------------

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    project.ext {
        mysqlVersion = '5.1.38'
    }

    dependencies {
        compile "mysql:mysql-connector-java:$mysqlVersion"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    test {
        systemProperties initEnvironment()
    }
}

// ------------------------------------------
// Flyway migrate needs properties
// ------------------------------------------

flywayMigrate {
    initEnvironment().each { prop ->
        project.ext[prop.key] = prop.value
    }
}

// ------------------------------------------
// Test tasks for the different environments
// ------------------------------------------

task repositoryTests {
    dependsOn project(':taskboard-domain').test
}

task acceptanceTests {
    dependsOn project(':taskboard-rest-api').test
}

// ------------------------------------------
// Read properties from the given environment
// ------------------------------------------

def initEnvironment() {
    Map<String, String> map = new HashMap<>();
    Properties props = new Properties()
    String location;

    if (env == null)
        env = 'loc'

    if (project.parent == null)
        location = "$project.rootDir/conf/${env}.properties"
    else
        location = "$project.parent.rootDir/conf/${env}.properties"

    props.load(new FileInputStream(location))

    props.each { prop ->
        map.put(prop.key.toString(), prop.value.toString())
    }

    return map
}